# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import swagger_client
from swagger_client.rest import ApiException
from swagger_client.apis.booking_api import BookingApi


class TestBookingApi(unittest.TestCase):
    """ BookingApi unit test stubs """

    def setUp(self):
        self.api = swagger_client.apis.booking_api.BookingApi()

    def tearDown(self):
        pass

    def test_add_booking_detail(self):
        """
        Test case for add_booking_detail

        Add a package / course / ticket with its session to the booking
        """
        pass

    def test_attach_accommodation(self):
        """
        Test case for attach_accommodation

        Attach an accommodation booking to a booking
        """
        pass

    def test_attach_addon(self):
        """
        Test case for attach_addon

        Attach an addon to a trip of a booking
        """
        pass

    def test_attach_pickup(self):
        """
        Test case for attach_pickup

        Attach a pickup location for a booking
        """
        pass

    def test_cancel_booking(self):
        """
        Test case for cancel_booking

        Cancel a booking
        """
        pass

    def test_confirm_booking(self):
        """
        Test case for confirm_booking

        Confirm a booking and all of its sessions and notify the lead customer
        """
        pass

    def test_delete_booking(self):
        """
        Test case for delete_booking

        Delete a booking by ID
        """
        pass

    def test_dettach_accommodation(self):
        """
        Test case for dettach_accommodation

        Dettach an accommodation booking to a booking
        """
        pass

    def test_dettach_addon(self):
        """
        Test case for dettach_addon

        Dettach an addon to a trip of a booking
        """
        pass

    def test_dettach_pickup(self):
        """
        Test case for dettach_pickup

        Dettach a pickup location for a booking
        """
        pass

    def test_edit_booking_info(self):
        """
        Test case for edit_booking_info

        Edit the information related to a booking
        """
        pass

    def test_filter_bookings(self):
        """
        Test case for filter_bookings

        Get all bookings matching a filter
        """
        pass

    def test_get_all_bookings(self):
        """
        Test case for get_all_bookings

        Retrieve all bookings
        """
        pass

    def test_get_all_with_trashed_bookings(self):
        """
        Test case for get_all_with_trashed_bookings

        Retrieve all bookings including any deleted models
        """
        pass

    def test_get_booking(self):
        """
        Test case for get_booking

        Retrieve a booking by ID
        """
        pass

    def test_get_customer_bookings(self):
        """
        Test case for get_customer_bookings

        Get all bookings for a customer
        """
        pass

    def test_get_payments(self):
        """
        Test case for get_payments

        Retrieve all payments made for a booking
        """
        pass

    def test_get_refunds(self):
        """
        Test case for get_refunds

        Retrieve all refunds for a booking
        """
        pass

    def test_get_todays_bookings(self):
        """
        Test case for get_todays_bookings

        Get all bookings made today
        """
        pass

    def test_get_tommorows_bookings(self):
        """
        Test case for get_tommorows_bookings

        Get all bookings made today
        """
        pass

    def test_init_booking(self):
        """
        Test case for init_booking

        Create a new empty booking
        """
        pass

    def test_remove_booking_detail(self):
        """
        Test case for remove_booking_detail

        Remove a detail from a booking
        """
        pass

    def test_resend_confirmation(self):
        """
        Test case for resend_confirmation

        Resend the confirmation email to the lead customer
        """
        pass

    def test_reserve_booking(self):
        """
        Test case for reserve_booking

        Reserve a booking and its sessions capcity until a set date
        """
        pass

    def test_save_booking(self):
        """
        Test case for save_booking

        Save a booking as a quote and release all capacity of sessions
        """
        pass

    def test_set_lead_customer(self):
        """
        Test case for set_lead_customer

        Set the lead customer for a booking
        """
        pass


if __name__ == '__main__':
    unittest.main()
