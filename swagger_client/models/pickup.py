# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Pickup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, booking_id=None, location=None, date=None, time=None, quantity=None):
        """
        Pickup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'booking_id': 'int',
            'location': 'str',
            'date': 'date',
            'time': 'datetime',
            'quantity': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'booking_id': 'booking_id',
            'location': 'location',
            'date': 'date',
            'time': 'time',
            'quantity': 'quantity'
        }

        self._id = id
        self._booking_id = booking_id
        self._location = location
        self._date = date
        self._time = time
        self._quantity = quantity

    @property
    def id(self):
        """
        Gets the id of this Pickup.


        :return: The id of this Pickup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Pickup.


        :param id: The id of this Pickup.
        :type: int
        """

        self._id = id

    @property
    def booking_id(self):
        """
        Gets the booking_id of this Pickup.


        :return: The booking_id of this Pickup.
        :rtype: int
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """
        Sets the booking_id of this Pickup.


        :param booking_id: The booking_id of this Pickup.
        :type: int
        """

        self._booking_id = booking_id

    @property
    def location(self):
        """
        Gets the location of this Pickup.


        :return: The location of this Pickup.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Pickup.


        :param location: The location of this Pickup.
        :type: str
        """

        self._location = location

    @property
    def date(self):
        """
        Gets the date of this Pickup.


        :return: The date of this Pickup.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this Pickup.


        :param date: The date of this Pickup.
        :type: date
        """

        self._date = date

    @property
    def time(self):
        """
        Gets the time of this Pickup.


        :return: The time of this Pickup.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this Pickup.


        :param time: The time of this Pickup.
        :type: datetime
        """

        self._time = time

    @property
    def quantity(self):
        """
        Gets the quantity of this Pickup.


        :return: The quantity of this Pickup.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this Pickup.


        :param quantity: The quantity of this Pickup.
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
