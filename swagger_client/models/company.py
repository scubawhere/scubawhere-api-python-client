# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Company(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, address_1=None, address_2=None, city=None, county=None, postcode=None, country_id=None, currency_id=None, business_email=None, business_phone=None, vat_number=None, registration_number=None, latitude=None, longitude=None, timezone=None, contact=None, website=None):
        """
        Company - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'address_1': 'str',
            'address_2': 'str',
            'city': 'str',
            'county': 'str',
            'postcode': 'str',
            'country_id': 'int',
            'currency_id': 'int',
            'business_email': 'str',
            'business_phone': 'str',
            'vat_number': 'str',
            'registration_number': 'str',
            'latitude': 'float',
            'longitude': 'float',
            'timezone': 'str',
            'contact': 'str',
            'website': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'address_1': 'address_1',
            'address_2': 'address_2',
            'city': 'city',
            'county': 'county',
            'postcode': 'postcode',
            'country_id': 'country_id',
            'currency_id': 'currency_id',
            'business_email': 'business_email',
            'business_phone': 'business_phone',
            'vat_number': 'vat_number',
            'registration_number': 'registration_number',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'timezone': 'timezone',
            'contact': 'contact',
            'website': 'website'
        }

        self._name = name
        self._description = description
        self._address_1 = address_1
        self._address_2 = address_2
        self._city = city
        self._county = county
        self._postcode = postcode
        self._country_id = country_id
        self._currency_id = currency_id
        self._business_email = business_email
        self._business_phone = business_phone
        self._vat_number = vat_number
        self._registration_number = registration_number
        self._latitude = latitude
        self._longitude = longitude
        self._timezone = timezone
        self._contact = contact
        self._website = website

    @property
    def name(self):
        """
        Gets the name of this Company.


        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Company.


        :param name: The name of this Company.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Company.


        :return: The description of this Company.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Company.


        :param description: The description of this Company.
        :type: str
        """

        self._description = description

    @property
    def address_1(self):
        """
        Gets the address_1 of this Company.


        :return: The address_1 of this Company.
        :rtype: str
        """
        return self._address_1

    @address_1.setter
    def address_1(self, address_1):
        """
        Sets the address_1 of this Company.


        :param address_1: The address_1 of this Company.
        :type: str
        """

        self._address_1 = address_1

    @property
    def address_2(self):
        """
        Gets the address_2 of this Company.


        :return: The address_2 of this Company.
        :rtype: str
        """
        return self._address_2

    @address_2.setter
    def address_2(self, address_2):
        """
        Sets the address_2 of this Company.


        :param address_2: The address_2 of this Company.
        :type: str
        """

        self._address_2 = address_2

    @property
    def city(self):
        """
        Gets the city of this Company.


        :return: The city of this Company.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Company.


        :param city: The city of this Company.
        :type: str
        """

        self._city = city

    @property
    def county(self):
        """
        Gets the county of this Company.


        :return: The county of this Company.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """
        Sets the county of this Company.


        :param county: The county of this Company.
        :type: str
        """

        self._county = county

    @property
    def postcode(self):
        """
        Gets the postcode of this Company.


        :return: The postcode of this Company.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """
        Sets the postcode of this Company.


        :param postcode: The postcode of this Company.
        :type: str
        """

        self._postcode = postcode

    @property
    def country_id(self):
        """
        Gets the country_id of this Company.


        :return: The country_id of this Company.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this Company.


        :param country_id: The country_id of this Company.
        :type: int
        """

        self._country_id = country_id

    @property
    def currency_id(self):
        """
        Gets the currency_id of this Company.


        :return: The currency_id of this Company.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """
        Sets the currency_id of this Company.


        :param currency_id: The currency_id of this Company.
        :type: int
        """

        self._currency_id = currency_id

    @property
    def business_email(self):
        """
        Gets the business_email of this Company.


        :return: The business_email of this Company.
        :rtype: str
        """
        return self._business_email

    @business_email.setter
    def business_email(self, business_email):
        """
        Sets the business_email of this Company.


        :param business_email: The business_email of this Company.
        :type: str
        """

        self._business_email = business_email

    @property
    def business_phone(self):
        """
        Gets the business_phone of this Company.


        :return: The business_phone of this Company.
        :rtype: str
        """
        return self._business_phone

    @business_phone.setter
    def business_phone(self, business_phone):
        """
        Sets the business_phone of this Company.


        :param business_phone: The business_phone of this Company.
        :type: str
        """

        self._business_phone = business_phone

    @property
    def vat_number(self):
        """
        Gets the vat_number of this Company.


        :return: The vat_number of this Company.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """
        Sets the vat_number of this Company.


        :param vat_number: The vat_number of this Company.
        :type: str
        """

        self._vat_number = vat_number

    @property
    def registration_number(self):
        """
        Gets the registration_number of this Company.


        :return: The registration_number of this Company.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """
        Sets the registration_number of this Company.


        :param registration_number: The registration_number of this Company.
        :type: str
        """

        self._registration_number = registration_number

    @property
    def latitude(self):
        """
        Gets the latitude of this Company.


        :return: The latitude of this Company.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this Company.


        :param latitude: The latitude of this Company.
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this Company.


        :return: The longitude of this Company.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this Company.


        :param longitude: The longitude of this Company.
        :type: float
        """

        self._longitude = longitude

    @property
    def timezone(self):
        """
        Gets the timezone of this Company.


        :return: The timezone of this Company.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this Company.


        :param timezone: The timezone of this Company.
        :type: str
        """

        self._timezone = timezone

    @property
    def contact(self):
        """
        Gets the contact of this Company.


        :return: The contact of this Company.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """
        Sets the contact of this Company.


        :param contact: The contact of this Company.
        :type: str
        """

        self._contact = contact

    @property
    def website(self):
        """
        Gets the website of this Company.


        :return: The website of this Company.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this Company.


        :param website: The website of this Company.
        :type: str
        """

        self._website = website

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
