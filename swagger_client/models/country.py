# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Country(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, countinent_id=None, currency_id=None, abbreviation=None, name=None):
        """
        Country - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'countinent_id': 'int',
            'currency_id': 'int',
            'abbreviation': 'str',
            'name': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'countinent_id': 'countinent_id',
            'currency_id': 'currency_id',
            'abbreviation': 'abbreviation',
            'name': 'name'
        }

        self._id = id
        self._countinent_id = countinent_id
        self._currency_id = currency_id
        self._abbreviation = abbreviation
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this Country.


        :return: The id of this Country.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Country.


        :param id: The id of this Country.
        :type: int
        """

        self._id = id

    @property
    def countinent_id(self):
        """
        Gets the countinent_id of this Country.


        :return: The countinent_id of this Country.
        :rtype: int
        """
        return self._countinent_id

    @countinent_id.setter
    def countinent_id(self, countinent_id):
        """
        Sets the countinent_id of this Country.


        :param countinent_id: The countinent_id of this Country.
        :type: int
        """

        self._countinent_id = countinent_id

    @property
    def currency_id(self):
        """
        Gets the currency_id of this Country.


        :return: The currency_id of this Country.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """
        Sets the currency_id of this Country.


        :param currency_id: The currency_id of this Country.
        :type: int
        """

        self._currency_id = currency_id

    @property
    def abbreviation(self):
        """
        Gets the abbreviation of this Country.


        :return: The abbreviation of this Country.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """
        Sets the abbreviation of this Country.


        :param abbreviation: The abbreviation of this Country.
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def name(self):
        """
        Gets the name of this Country.


        :return: The name of this Country.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Country.


        :param name: The name of this Country.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
