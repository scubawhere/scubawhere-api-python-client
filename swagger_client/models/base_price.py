# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BasePrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, owner_id=None, owner_type=None, price=None, _from=None, until=None, decimal_price=None):
        """
        BasePrice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'owner_id': 'int',
            'owner_type': 'str',
            'price': 'int',
            '_from': 'date',
            'until': 'date',
            'decimal_price': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'owner_id': 'owner_id',
            'owner_type': 'owner_type',
            'price': 'price',
            '_from': 'from',
            'until': 'until',
            'decimal_price': 'decimal_price'
        }

        self._id = id
        self._owner_id = owner_id
        self._owner_type = owner_type
        self._price = price
        self.__from = _from
        self._until = until
        self._decimal_price = decimal_price

    @property
    def id(self):
        """
        Gets the id of this BasePrice.


        :return: The id of this BasePrice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BasePrice.


        :param id: The id of this BasePrice.
        :type: int
        """

        self._id = id

    @property
    def owner_id(self):
        """
        Gets the owner_id of this BasePrice.


        :return: The owner_id of this BasePrice.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this BasePrice.


        :param owner_id: The owner_id of this BasePrice.
        :type: int
        """

        self._owner_id = owner_id

    @property
    def owner_type(self):
        """
        Gets the owner_type of this BasePrice.


        :return: The owner_type of this BasePrice.
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """
        Sets the owner_type of this BasePrice.


        :param owner_type: The owner_type of this BasePrice.
        :type: str
        """

        self._owner_type = owner_type

    @property
    def price(self):
        """
        Gets the price of this BasePrice.


        :return: The price of this BasePrice.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this BasePrice.


        :param price: The price of this BasePrice.
        :type: int
        """

        self._price = price

    @property
    def _from(self):
        """
        Gets the _from of this BasePrice.


        :return: The _from of this BasePrice.
        :rtype: date
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this BasePrice.


        :param _from: The _from of this BasePrice.
        :type: date
        """

        self.__from = _from

    @property
    def until(self):
        """
        Gets the until of this BasePrice.


        :return: The until of this BasePrice.
        :rtype: date
        """
        return self._until

    @until.setter
    def until(self, until):
        """
        Sets the until of this BasePrice.


        :param until: The until of this BasePrice.
        :type: date
        """

        self._until = until

    @property
    def decimal_price(self):
        """
        Gets the decimal_price of this BasePrice.


        :return: The decimal_price of this BasePrice.
        :rtype: int
        """
        return self._decimal_price

    @decimal_price.setter
    def decimal_price(self, decimal_price):
        """
        Sets the decimal_price of this BasePrice.


        :param decimal_price: The decimal_price of this BasePrice.
        :type: int
        """

        self._decimal_price = decimal_price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
