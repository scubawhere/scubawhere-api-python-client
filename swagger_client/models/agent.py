# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Agent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, website=None, branch_name=None, branch_address=None, branch_phone=None, branch_email=None, billing_address=None, billing_phone=None, billing_email=None, commission=None, terms=None):
        """
        Agent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'website': 'str',
            'branch_name': 'str',
            'branch_address': 'str',
            'branch_phone': 'str',
            'branch_email': 'str',
            'billing_address': 'str',
            'billing_phone': 'str',
            'billing_email': 'str',
            'commission': 'float',
            'terms': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'website': 'website',
            'branch_name': 'branch_name',
            'branch_address': 'branch_address',
            'branch_phone': 'branch_phone',
            'branch_email': 'branch_email',
            'billing_address': 'billing_address',
            'billing_phone': 'billing_phone',
            'billing_email': 'billing_email',
            'commission': 'commission',
            'terms': 'terms'
        }

        self._id = id
        self._name = name
        self._website = website
        self._branch_name = branch_name
        self._branch_address = branch_address
        self._branch_phone = branch_phone
        self._branch_email = branch_email
        self._billing_address = billing_address
        self._billing_phone = billing_phone
        self._billing_email = billing_email
        self._commission = commission
        self._terms = terms

    @property
    def id(self):
        """
        Gets the id of this Agent.


        :return: The id of this Agent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Agent.


        :param id: The id of this Agent.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Agent.


        :return: The name of this Agent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Agent.


        :param name: The name of this Agent.
        :type: str
        """

        self._name = name

    @property
    def website(self):
        """
        Gets the website of this Agent.


        :return: The website of this Agent.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this Agent.


        :param website: The website of this Agent.
        :type: str
        """

        self._website = website

    @property
    def branch_name(self):
        """
        Gets the branch_name of this Agent.


        :return: The branch_name of this Agent.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """
        Sets the branch_name of this Agent.


        :param branch_name: The branch_name of this Agent.
        :type: str
        """

        self._branch_name = branch_name

    @property
    def branch_address(self):
        """
        Gets the branch_address of this Agent.


        :return: The branch_address of this Agent.
        :rtype: str
        """
        return self._branch_address

    @branch_address.setter
    def branch_address(self, branch_address):
        """
        Sets the branch_address of this Agent.


        :param branch_address: The branch_address of this Agent.
        :type: str
        """

        self._branch_address = branch_address

    @property
    def branch_phone(self):
        """
        Gets the branch_phone of this Agent.


        :return: The branch_phone of this Agent.
        :rtype: str
        """
        return self._branch_phone

    @branch_phone.setter
    def branch_phone(self, branch_phone):
        """
        Sets the branch_phone of this Agent.


        :param branch_phone: The branch_phone of this Agent.
        :type: str
        """

        self._branch_phone = branch_phone

    @property
    def branch_email(self):
        """
        Gets the branch_email of this Agent.


        :return: The branch_email of this Agent.
        :rtype: str
        """
        return self._branch_email

    @branch_email.setter
    def branch_email(self, branch_email):
        """
        Sets the branch_email of this Agent.


        :param branch_email: The branch_email of this Agent.
        :type: str
        """

        self._branch_email = branch_email

    @property
    def billing_address(self):
        """
        Gets the billing_address of this Agent.


        :return: The billing_address of this Agent.
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this Agent.


        :param billing_address: The billing_address of this Agent.
        :type: str
        """

        self._billing_address = billing_address

    @property
    def billing_phone(self):
        """
        Gets the billing_phone of this Agent.


        :return: The billing_phone of this Agent.
        :rtype: str
        """
        return self._billing_phone

    @billing_phone.setter
    def billing_phone(self, billing_phone):
        """
        Sets the billing_phone of this Agent.


        :param billing_phone: The billing_phone of this Agent.
        :type: str
        """

        self._billing_phone = billing_phone

    @property
    def billing_email(self):
        """
        Gets the billing_email of this Agent.


        :return: The billing_email of this Agent.
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """
        Sets the billing_email of this Agent.


        :param billing_email: The billing_email of this Agent.
        :type: str
        """

        self._billing_email = billing_email

    @property
    def commission(self):
        """
        Gets the commission of this Agent.


        :return: The commission of this Agent.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """
        Sets the commission of this Agent.


        :param commission: The commission of this Agent.
        :type: float
        """

        self._commission = commission

    @property
    def terms(self):
        """
        Gets the terms of this Agent.


        :return: The terms of this Agent.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this Agent.


        :param terms: The terms of this Agent.
        :type: str
        """

        self._terms = terms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
