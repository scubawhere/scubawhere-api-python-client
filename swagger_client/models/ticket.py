# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Ticket(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, only_packaged=None, available_from=None, available_until=None, trips=None):
        """
        Ticket - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'only_packaged': 'bool',
            'available_from': 'date',
            'available_until': 'date',
            'trips': 'list[Trip]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'only_packaged': 'only_packaged',
            'available_from': 'available_from',
            'available_until': 'available_until',
            'trips': 'trips'
        }

        self._id = id
        self._name = name
        self._description = description
        self._only_packaged = only_packaged
        self._available_from = available_from
        self._available_until = available_until
        self._trips = trips

    @property
    def id(self):
        """
        Gets the id of this Ticket.


        :return: The id of this Ticket.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Ticket.


        :param id: The id of this Ticket.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Ticket.


        :return: The name of this Ticket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Ticket.


        :param name: The name of this Ticket.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Ticket.


        :return: The description of this Ticket.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Ticket.


        :param description: The description of this Ticket.
        :type: str
        """

        self._description = description

    @property
    def only_packaged(self):
        """
        Gets the only_packaged of this Ticket.


        :return: The only_packaged of this Ticket.
        :rtype: bool
        """
        return self._only_packaged

    @only_packaged.setter
    def only_packaged(self, only_packaged):
        """
        Sets the only_packaged of this Ticket.


        :param only_packaged: The only_packaged of this Ticket.
        :type: bool
        """

        self._only_packaged = only_packaged

    @property
    def available_from(self):
        """
        Gets the available_from of this Ticket.


        :return: The available_from of this Ticket.
        :rtype: date
        """
        return self._available_from

    @available_from.setter
    def available_from(self, available_from):
        """
        Sets the available_from of this Ticket.


        :param available_from: The available_from of this Ticket.
        :type: date
        """

        self._available_from = available_from

    @property
    def available_until(self):
        """
        Gets the available_until of this Ticket.


        :return: The available_until of this Ticket.
        :rtype: date
        """
        return self._available_until

    @available_until.setter
    def available_until(self, available_until):
        """
        Sets the available_until of this Ticket.


        :param available_until: The available_until of this Ticket.
        :type: date
        """

        self._available_until = available_until

    @property
    def trips(self):
        """
        Gets the trips of this Ticket.


        :return: The trips of this Ticket.
        :rtype: list[Trip]
        """
        return self._trips

    @trips.setter
    def trips(self, trips):
        """
        Sets the trips of this Ticket.


        :param trips: The trips of this Ticket.
        :type: list[Trip]
        """

        self._trips = trips

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
