# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20042Utilisation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, date=None, name=None, relations=None, assigned=None, unassigned=None, capacity=None):
        """
        InlineResponse20042Utilisation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'date': 'date',
            'name': 'date',
            'relations': 'list[int]',
            'assigned': 'int',
            'unassigned': 'int',
            'capacity': 'int'
        }

        self.attribute_map = {
            'date': 'date',
            'name': 'name',
            'relations': 'relations',
            'assigned': 'assigned',
            'unassigned': 'unassigned',
            'capacity': 'capacity'
        }

        self._date = date
        self._name = name
        self._relations = relations
        self._assigned = assigned
        self._unassigned = unassigned
        self._capacity = capacity

    @property
    def date(self):
        """
        Gets the date of this InlineResponse20042Utilisation.


        :return: The date of this InlineResponse20042Utilisation.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this InlineResponse20042Utilisation.


        :param date: The date of this InlineResponse20042Utilisation.
        :type: date
        """

        self._date = date

    @property
    def name(self):
        """
        Gets the name of this InlineResponse20042Utilisation.


        :return: The name of this InlineResponse20042Utilisation.
        :rtype: date
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse20042Utilisation.


        :param name: The name of this InlineResponse20042Utilisation.
        :type: date
        """

        self._name = name

    @property
    def relations(self):
        """
        Gets the relations of this InlineResponse20042Utilisation.


        :return: The relations of this InlineResponse20042Utilisation.
        :rtype: list[int]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """
        Sets the relations of this InlineResponse20042Utilisation.


        :param relations: The relations of this InlineResponse20042Utilisation.
        :type: list[int]
        """

        self._relations = relations

    @property
    def assigned(self):
        """
        Gets the assigned of this InlineResponse20042Utilisation.


        :return: The assigned of this InlineResponse20042Utilisation.
        :rtype: int
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """
        Sets the assigned of this InlineResponse20042Utilisation.


        :param assigned: The assigned of this InlineResponse20042Utilisation.
        :type: int
        """

        self._assigned = assigned

    @property
    def unassigned(self):
        """
        Gets the unassigned of this InlineResponse20042Utilisation.


        :return: The unassigned of this InlineResponse20042Utilisation.
        :rtype: int
        """
        return self._unassigned

    @unassigned.setter
    def unassigned(self, unassigned):
        """
        Sets the unassigned of this InlineResponse20042Utilisation.


        :param unassigned: The unassigned of this InlineResponse20042Utilisation.
        :type: int
        """

        self._unassigned = unassigned

    @property
    def capacity(self):
        """
        Gets the capacity of this InlineResponse20042Utilisation.


        :return: The capacity of this InlineResponse20042Utilisation.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this InlineResponse20042Utilisation.


        :param capacity: The capacity of this InlineResponse20042Utilisation.
        :type: int
        """

        self._capacity = capacity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
