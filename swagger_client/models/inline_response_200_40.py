# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20040(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, daterange=None, accommodations=None, accommodation_toal=None, addons=None, addons_toal=None, courses=None, courses_toal=None, fees=None, fees_toal=None, packages=None, package_toal=None, tickets=None, ticket_toal=None):
        """
        InlineResponse20040 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'daterange': 'DateRange',
            'accommodations': 'ReportEntry',
            'accommodation_toal': 'ReportEntryTotal',
            'addons': 'ReportEntry',
            'addons_toal': 'ReportEntryTotal',
            'courses': 'ReportEntry',
            'courses_toal': 'ReportEntryTotal',
            'fees': 'ReportEntry',
            'fees_toal': 'ReportEntryTotal',
            'packages': 'ReportEntry',
            'package_toal': 'ReportEntryTotal',
            'tickets': 'ReportEntry',
            'ticket_toal': 'ReportEntryTotal'
        }

        self.attribute_map = {
            'daterange': 'daterange',
            'accommodations': 'accommodations',
            'accommodation_toal': 'accommodation_toal',
            'addons': 'addons',
            'addons_toal': 'addons_toal',
            'courses': 'courses',
            'courses_toal': 'courses_toal',
            'fees': 'fees',
            'fees_toal': 'fees_toal',
            'packages': 'packages',
            'package_toal': 'package_toal',
            'tickets': 'tickets',
            'ticket_toal': 'ticket_toal'
        }

        self._daterange = daterange
        self._accommodations = accommodations
        self._accommodation_toal = accommodation_toal
        self._addons = addons
        self._addons_toal = addons_toal
        self._courses = courses
        self._courses_toal = courses_toal
        self._fees = fees
        self._fees_toal = fees_toal
        self._packages = packages
        self._package_toal = package_toal
        self._tickets = tickets
        self._ticket_toal = ticket_toal

    @property
    def daterange(self):
        """
        Gets the daterange of this InlineResponse20040.


        :return: The daterange of this InlineResponse20040.
        :rtype: DateRange
        """
        return self._daterange

    @daterange.setter
    def daterange(self, daterange):
        """
        Sets the daterange of this InlineResponse20040.


        :param daterange: The daterange of this InlineResponse20040.
        :type: DateRange
        """

        self._daterange = daterange

    @property
    def accommodations(self):
        """
        Gets the accommodations of this InlineResponse20040.


        :return: The accommodations of this InlineResponse20040.
        :rtype: ReportEntry
        """
        return self._accommodations

    @accommodations.setter
    def accommodations(self, accommodations):
        """
        Sets the accommodations of this InlineResponse20040.


        :param accommodations: The accommodations of this InlineResponse20040.
        :type: ReportEntry
        """

        self._accommodations = accommodations

    @property
    def accommodation_toal(self):
        """
        Gets the accommodation_toal of this InlineResponse20040.


        :return: The accommodation_toal of this InlineResponse20040.
        :rtype: ReportEntryTotal
        """
        return self._accommodation_toal

    @accommodation_toal.setter
    def accommodation_toal(self, accommodation_toal):
        """
        Sets the accommodation_toal of this InlineResponse20040.


        :param accommodation_toal: The accommodation_toal of this InlineResponse20040.
        :type: ReportEntryTotal
        """

        self._accommodation_toal = accommodation_toal

    @property
    def addons(self):
        """
        Gets the addons of this InlineResponse20040.


        :return: The addons of this InlineResponse20040.
        :rtype: ReportEntry
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """
        Sets the addons of this InlineResponse20040.


        :param addons: The addons of this InlineResponse20040.
        :type: ReportEntry
        """

        self._addons = addons

    @property
    def addons_toal(self):
        """
        Gets the addons_toal of this InlineResponse20040.


        :return: The addons_toal of this InlineResponse20040.
        :rtype: ReportEntryTotal
        """
        return self._addons_toal

    @addons_toal.setter
    def addons_toal(self, addons_toal):
        """
        Sets the addons_toal of this InlineResponse20040.


        :param addons_toal: The addons_toal of this InlineResponse20040.
        :type: ReportEntryTotal
        """

        self._addons_toal = addons_toal

    @property
    def courses(self):
        """
        Gets the courses of this InlineResponse20040.


        :return: The courses of this InlineResponse20040.
        :rtype: ReportEntry
        """
        return self._courses

    @courses.setter
    def courses(self, courses):
        """
        Sets the courses of this InlineResponse20040.


        :param courses: The courses of this InlineResponse20040.
        :type: ReportEntry
        """

        self._courses = courses

    @property
    def courses_toal(self):
        """
        Gets the courses_toal of this InlineResponse20040.


        :return: The courses_toal of this InlineResponse20040.
        :rtype: ReportEntryTotal
        """
        return self._courses_toal

    @courses_toal.setter
    def courses_toal(self, courses_toal):
        """
        Sets the courses_toal of this InlineResponse20040.


        :param courses_toal: The courses_toal of this InlineResponse20040.
        :type: ReportEntryTotal
        """

        self._courses_toal = courses_toal

    @property
    def fees(self):
        """
        Gets the fees of this InlineResponse20040.


        :return: The fees of this InlineResponse20040.
        :rtype: ReportEntry
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """
        Sets the fees of this InlineResponse20040.


        :param fees: The fees of this InlineResponse20040.
        :type: ReportEntry
        """

        self._fees = fees

    @property
    def fees_toal(self):
        """
        Gets the fees_toal of this InlineResponse20040.


        :return: The fees_toal of this InlineResponse20040.
        :rtype: ReportEntryTotal
        """
        return self._fees_toal

    @fees_toal.setter
    def fees_toal(self, fees_toal):
        """
        Sets the fees_toal of this InlineResponse20040.


        :param fees_toal: The fees_toal of this InlineResponse20040.
        :type: ReportEntryTotal
        """

        self._fees_toal = fees_toal

    @property
    def packages(self):
        """
        Gets the packages of this InlineResponse20040.


        :return: The packages of this InlineResponse20040.
        :rtype: ReportEntry
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """
        Sets the packages of this InlineResponse20040.


        :param packages: The packages of this InlineResponse20040.
        :type: ReportEntry
        """

        self._packages = packages

    @property
    def package_toal(self):
        """
        Gets the package_toal of this InlineResponse20040.


        :return: The package_toal of this InlineResponse20040.
        :rtype: ReportEntryTotal
        """
        return self._package_toal

    @package_toal.setter
    def package_toal(self, package_toal):
        """
        Sets the package_toal of this InlineResponse20040.


        :param package_toal: The package_toal of this InlineResponse20040.
        :type: ReportEntryTotal
        """

        self._package_toal = package_toal

    @property
    def tickets(self):
        """
        Gets the tickets of this InlineResponse20040.


        :return: The tickets of this InlineResponse20040.
        :rtype: ReportEntry
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """
        Sets the tickets of this InlineResponse20040.


        :param tickets: The tickets of this InlineResponse20040.
        :type: ReportEntry
        """

        self._tickets = tickets

    @property
    def ticket_toal(self):
        """
        Gets the ticket_toal of this InlineResponse20040.


        :return: The ticket_toal of this InlineResponse20040.
        :rtype: ReportEntryTotal
        """
        return self._ticket_toal

    @ticket_toal.setter
    def ticket_toal(self, ticket_toal):
        """
        Sets the ticket_toal of this InlineResponse20040.


        :param ticket_toal: The ticket_toal of this InlineResponse20040.
        :type: ReportEntryTotal
        """

        self._ticket_toal = ticket_toal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
