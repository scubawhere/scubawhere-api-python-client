# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20010(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, id=None, addons=None, decimal_price=None, boatroom_id=None, package_decimal_price=None, course_decimal_price=None, ticket_decimal_price=None, packagefacade_id=None):
        """
        InlineResponse20010 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'id': 'int',
            'addons': 'list[Addon]',
            'decimal_price': 'str',
            'boatroom_id': 'int',
            'package_decimal_price': 'str',
            'course_decimal_price': 'str',
            'ticket_decimal_price': 'str',
            'packagefacade_id': 'str'
        }

        self.attribute_map = {
            'status': 'status',
            'id': 'id',
            'addons': 'addons',
            'decimal_price': 'decimal_price',
            'boatroom_id': 'boatroom_id',
            'package_decimal_price': 'package_decimal_price',
            'course_decimal_price': 'course_decimal_price',
            'ticket_decimal_price': 'ticket_decimal_price',
            'packagefacade_id': 'packagefacade_id'
        }

        self._status = status
        self._id = id
        self._addons = addons
        self._decimal_price = decimal_price
        self._boatroom_id = boatroom_id
        self._package_decimal_price = package_decimal_price
        self._course_decimal_price = course_decimal_price
        self._ticket_decimal_price = ticket_decimal_price
        self._packagefacade_id = packagefacade_id

    @property
    def status(self):
        """
        Gets the status of this InlineResponse20010.


        :return: The status of this InlineResponse20010.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse20010.


        :param status: The status of this InlineResponse20010.
        :type: str
        """

        self._status = status

    @property
    def id(self):
        """
        Gets the id of this InlineResponse20010.


        :return: The id of this InlineResponse20010.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse20010.


        :param id: The id of this InlineResponse20010.
        :type: int
        """

        self._id = id

    @property
    def addons(self):
        """
        Gets the addons of this InlineResponse20010.


        :return: The addons of this InlineResponse20010.
        :rtype: list[Addon]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """
        Sets the addons of this InlineResponse20010.


        :param addons: The addons of this InlineResponse20010.
        :type: list[Addon]
        """

        self._addons = addons

    @property
    def decimal_price(self):
        """
        Gets the decimal_price of this InlineResponse20010.


        :return: The decimal_price of this InlineResponse20010.
        :rtype: str
        """
        return self._decimal_price

    @decimal_price.setter
    def decimal_price(self, decimal_price):
        """
        Sets the decimal_price of this InlineResponse20010.


        :param decimal_price: The decimal_price of this InlineResponse20010.
        :type: str
        """

        self._decimal_price = decimal_price

    @property
    def boatroom_id(self):
        """
        Gets the boatroom_id of this InlineResponse20010.


        :return: The boatroom_id of this InlineResponse20010.
        :rtype: int
        """
        return self._boatroom_id

    @boatroom_id.setter
    def boatroom_id(self, boatroom_id):
        """
        Sets the boatroom_id of this InlineResponse20010.


        :param boatroom_id: The boatroom_id of this InlineResponse20010.
        :type: int
        """

        self._boatroom_id = boatroom_id

    @property
    def package_decimal_price(self):
        """
        Gets the package_decimal_price of this InlineResponse20010.


        :return: The package_decimal_price of this InlineResponse20010.
        :rtype: str
        """
        return self._package_decimal_price

    @package_decimal_price.setter
    def package_decimal_price(self, package_decimal_price):
        """
        Sets the package_decimal_price of this InlineResponse20010.


        :param package_decimal_price: The package_decimal_price of this InlineResponse20010.
        :type: str
        """

        self._package_decimal_price = package_decimal_price

    @property
    def course_decimal_price(self):
        """
        Gets the course_decimal_price of this InlineResponse20010.


        :return: The course_decimal_price of this InlineResponse20010.
        :rtype: str
        """
        return self._course_decimal_price

    @course_decimal_price.setter
    def course_decimal_price(self, course_decimal_price):
        """
        Sets the course_decimal_price of this InlineResponse20010.


        :param course_decimal_price: The course_decimal_price of this InlineResponse20010.
        :type: str
        """

        self._course_decimal_price = course_decimal_price

    @property
    def ticket_decimal_price(self):
        """
        Gets the ticket_decimal_price of this InlineResponse20010.


        :return: The ticket_decimal_price of this InlineResponse20010.
        :rtype: str
        """
        return self._ticket_decimal_price

    @ticket_decimal_price.setter
    def ticket_decimal_price(self, ticket_decimal_price):
        """
        Sets the ticket_decimal_price of this InlineResponse20010.


        :param ticket_decimal_price: The ticket_decimal_price of this InlineResponse20010.
        :type: str
        """

        self._ticket_decimal_price = ticket_decimal_price

    @property
    def packagefacade_id(self):
        """
        Gets the packagefacade_id of this InlineResponse20010.


        :return: The packagefacade_id of this InlineResponse20010.
        :rtype: str
        """
        return self._packagefacade_id

    @packagefacade_id.setter
    def packagefacade_id(self, packagefacade_id):
        """
        Sets the packagefacade_id of this InlineResponse20010.


        :param packagefacade_id: The packagefacade_id of this InlineResponse20010.
        :type: str
        """

        self._packagefacade_id = packagefacade_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
