# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BookingApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_booking_detail(self, booking_id, customer_id, **kwargs):
        """
        Add a package / course / ticket with its session to the booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_booking_detail(booking_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int customer_id:  (required)
        :param int ticket_id: 
        :param int session_id: 
        :param int boatroom_id: 
        :param int training_session_id: 
        :param bool temporary: 
        :param int package_id: 
        :param int packagefacade_id: 
        :param int course_id: 
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_booking_detail_with_http_info(booking_id, customer_id, **kwargs)
        else:
            (data) = self.add_booking_detail_with_http_info(booking_id, customer_id, **kwargs)
            return data

    def add_booking_detail_with_http_info(self, booking_id, customer_id, **kwargs):
        """
        Add a package / course / ticket with its session to the booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_booking_detail_with_http_info(booking_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int customer_id:  (required)
        :param int ticket_id: 
        :param int session_id: 
        :param int boatroom_id: 
        :param int training_session_id: 
        :param bool temporary: 
        :param int package_id: 
        :param int packagefacade_id: 
        :param int course_id: 
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'customer_id', 'ticket_id', 'session_id', 'boatroom_id', 'training_session_id', 'temporary', 'package_id', 'packagefacade_id', 'course_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_booking_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `add_booking_detail`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `add_booking_detail`")

        resource_path = '/booking/add-detail'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'customer_id' in params:
            query_params['customer_id'] = params['customer_id']
        if 'ticket_id' in params:
            query_params['ticket_id'] = params['ticket_id']
        if 'session_id' in params:
            query_params['session_id'] = params['session_id']
        if 'boatroom_id' in params:
            query_params['boatroom_id'] = params['boatroom_id']
        if 'training_session_id' in params:
            query_params['training_session_id'] = params['training_session_id']
        if 'temporary' in params:
            query_params['temporary'] = params['temporary']
        if 'package_id' in params:
            query_params['package_id'] = params['package_id']
        if 'packagefacade_id' in params:
            query_params['packagefacade_id'] = params['packagefacade_id']
        if 'course_id' in params:
            query_params['course_id'] = params['course_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20010',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def attach_accommodation(self, booking_id, accommodation_id, customer_id, **kwargs):
        """
        Attach an accommodation booking to a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attach_accommodation(booking_id, accommodation_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int accommodation_id:  (required)
        :param int customer_id:  (required)
        :param date start: 
        :param date end: 
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, **kwargs)
        else:
            (data) = self.attach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, **kwargs)
            return data

    def attach_accommodation_with_http_info(self, booking_id, accommodation_id, customer_id, **kwargs):
        """
        Attach an accommodation booking to a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int accommodation_id:  (required)
        :param int customer_id:  (required)
        :param date start: 
        :param date end: 
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'accommodation_id', 'customer_id', 'start', 'end']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_accommodation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `attach_accommodation`")
        # verify the required parameter 'accommodation_id' is set
        if ('accommodation_id' not in params) or (params['accommodation_id'] is None):
            raise ValueError("Missing the required parameter `accommodation_id` when calling `attach_accommodation`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `attach_accommodation`")

        resource_path = '/booking/add-accommodation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'accommodation_id' in params:
            query_params['accommodation_id'] = params['accommodation_id']
        if 'customer_id' in params:
            query_params['customer_id'] = params['customer_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2008',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def attach_addon(self, booking_id, bookingdetail_id, addon_id, **kwargs):
        """
        Attach an addon to a trip of a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attach_addon(booking_id, bookingdetail_id, addon_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int bookingdetail_id:  (required)
        :param int addon_id:  (required)
        :param int quantity: 
        :param int packagefacade_id: 
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, **kwargs)
        else:
            (data) = self.attach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, **kwargs)
            return data

    def attach_addon_with_http_info(self, booking_id, bookingdetail_id, addon_id, **kwargs):
        """
        Attach an addon to a trip of a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int bookingdetail_id:  (required)
        :param int addon_id:  (required)
        :param int quantity: 
        :param int packagefacade_id: 
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'bookingdetail_id', 'addon_id', 'quantity', 'packagefacade_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `attach_addon`")
        # verify the required parameter 'bookingdetail_id' is set
        if ('bookingdetail_id' not in params) or (params['bookingdetail_id'] is None):
            raise ValueError("Missing the required parameter `bookingdetail_id` when calling `attach_addon`")
        # verify the required parameter 'addon_id' is set
        if ('addon_id' not in params) or (params['addon_id'] is None):
            raise ValueError("Missing the required parameter `addon_id` when calling `attach_addon`")

        resource_path = '/booking/add-addon'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'bookingdetail_id' in params:
            query_params['bookingdetail_id'] = params['bookingdetail_id']
        if 'addon_id' in params:
            query_params['addon_id'] = params['addon_id']
        if 'quantity' in params:
            query_params['quantity'] = params['quantity']
        if 'packagefacade_id' in params:
            query_params['packagefacade_id'] = params['packagefacade_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2009',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def attach_pickup(self, booking_id, location, date, time, **kwargs):
        """
        Attach a pickup location for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attach_pickup(booking_id, location, date, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param str location:  (required)
        :param date date:  (required)
        :param str time:  (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attach_pickup_with_http_info(booking_id, location, date, time, **kwargs)
        else:
            (data) = self.attach_pickup_with_http_info(booking_id, location, date, time, **kwargs)
            return data

    def attach_pickup_with_http_info(self, booking_id, location, date, time, **kwargs):
        """
        Attach a pickup location for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attach_pickup_with_http_info(booking_id, location, date, time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param str location:  (required)
        :param date date:  (required)
        :param str time:  (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'location', 'date', 'time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_pickup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `attach_pickup`")
        # verify the required parameter 'location' is set
        if ('location' not in params) or (params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `attach_pickup`")
        # verify the required parameter 'date' is set
        if ('date' not in params) or (params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `attach_pickup`")
        # verify the required parameter 'time' is set
        if ('time' not in params) or (params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `attach_pickup`")

        resource_path = '/booking/add-pickup'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'location' in params:
            query_params['location'] = params['location']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'time' in params:
            query_params['time'] = params['time']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20011',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def cancel_booking(self, booking_id, **kwargs):
        """
        Cancel a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_booking(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_booking_with_http_info(booking_id, **kwargs)
        else:
            (data) = self.cancel_booking_with_http_info(booking_id, **kwargs)
            return data

    def cancel_booking_with_http_info(self, booking_id, **kwargs):
        """
        Cancel a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_booking_with_http_info(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `cancel_booking`")

        resource_path = '/booking/cancel'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def confirm_booking(self, booking_id, **kwargs):
        """
        Confirm a booking and all of its sessions and notify the lead customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.confirm_booking(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.confirm_booking_with_http_info(booking_id, **kwargs)
        else:
            (data) = self.confirm_booking_with_http_info(booking_id, **kwargs)
            return data

    def confirm_booking_with_http_info(self, booking_id, **kwargs):
        """
        Confirm a booking and all of its sessions and notify the lead customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.confirm_booking_with_http_info(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method confirm_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `confirm_booking`")

        resource_path = '/booking/confirm'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20012',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_booking(self, id, **kwargs):
        """
        Delete a booking by ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_booking(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_booking_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_booking_with_http_info(id, **kwargs)
            return data

    def delete_booking_with_http_info(self, id, **kwargs):
        """
        Delete a booking by ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_booking_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_booking`")

        resource_path = '/booking/delete'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def dettach_accommodation(self, booking_id, accommodation_id, customer_id, **kwargs):
        """
        Dettach an accommodation booking to a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dettach_accommodation(booking_id, accommodation_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int accommodation_id:  (required)
        :param int customer_id:  (required)
        :param date start: 
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dettach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, **kwargs)
        else:
            (data) = self.dettach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, **kwargs)
            return data

    def dettach_accommodation_with_http_info(self, booking_id, accommodation_id, customer_id, **kwargs):
        """
        Dettach an accommodation booking to a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dettach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int accommodation_id:  (required)
        :param int customer_id:  (required)
        :param date start: 
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'accommodation_id', 'customer_id', 'start']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dettach_accommodation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `dettach_accommodation`")
        # verify the required parameter 'accommodation_id' is set
        if ('accommodation_id' not in params) or (params['accommodation_id'] is None):
            raise ValueError("Missing the required parameter `accommodation_id` when calling `dettach_accommodation`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `dettach_accommodation`")

        resource_path = '/booking/remove-accommodation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'accommodation_id' in params:
            query_params['accommodation_id'] = params['accommodation_id']
        if 'customer_id' in params:
            query_params['customer_id'] = params['customer_id']
        if 'start' in params:
            query_params['start'] = params['start']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20017',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def dettach_addon(self, booking_id, bookingdetail_id, addon_id, **kwargs):
        """
        Dettach an addon to a trip of a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dettach_addon(booking_id, bookingdetail_id, addon_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int bookingdetail_id:  (required)
        :param int addon_id:  (required)
        :param int packagefacade_id: 
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dettach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, **kwargs)
        else:
            (data) = self.dettach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, **kwargs)
            return data

    def dettach_addon_with_http_info(self, booking_id, bookingdetail_id, addon_id, **kwargs):
        """
        Dettach an addon to a trip of a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dettach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int bookingdetail_id:  (required)
        :param int addon_id:  (required)
        :param int packagefacade_id: 
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'bookingdetail_id', 'addon_id', 'packagefacade_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dettach_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `dettach_addon`")
        # verify the required parameter 'bookingdetail_id' is set
        if ('bookingdetail_id' not in params) or (params['bookingdetail_id'] is None):
            raise ValueError("Missing the required parameter `bookingdetail_id` when calling `dettach_addon`")
        # verify the required parameter 'addon_id' is set
        if ('addon_id' not in params) or (params['addon_id'] is None):
            raise ValueError("Missing the required parameter `addon_id` when calling `dettach_addon`")

        resource_path = '/booking/remove-addon'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'bookingdetail_id' in params:
            query_params['bookingdetail_id'] = params['bookingdetail_id']
        if 'addon_id' in params:
            query_params['addon_id'] = params['addon_id']
        if 'packagefacade_id' in params:
            query_params['packagefacade_id'] = params['packagefacade_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20017',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def dettach_pickup(self, booking_id, **kwargs):
        """
        Dettach a pickup location for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dettach_pickup(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int id: 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dettach_pickup_with_http_info(booking_id, **kwargs)
        else:
            (data) = self.dettach_pickup_with_http_info(booking_id, **kwargs)
            return data

    def dettach_pickup_with_http_info(self, booking_id, **kwargs):
        """
        Dettach a pickup location for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dettach_pickup_with_http_info(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int id: 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dettach_pickup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `dettach_pickup`")

        resource_path = '/booking/remove-pickup'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def edit_booking_info(self, **kwargs):
        """
        Edit the information related to a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_booking_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id: 
        :param float discount: 
        :param str comment: 
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_booking_info_with_http_info(**kwargs)
        else:
            (data) = self.edit_booking_info_with_http_info(**kwargs)
            return data

    def edit_booking_info_with_http_info(self, **kwargs):
        """
        Edit the information related to a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_booking_info_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id: 
        :param float discount: 
        :param str comment: 
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'discount', 'comment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_booking_info" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/edit-info'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'discount' in params:
            query_params['discount'] = params['discount']
        if 'comment' in params:
            query_params['comment'] = params['comment']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20014',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def filter_bookings(self, **kwargs):
        """
        Get all bookings matching a filter
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.filter_bookings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reference: 
        :param date date: 
        :param str lastname: 
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.filter_bookings_with_http_info(**kwargs)
        else:
            (data) = self.filter_bookings_with_http_info(**kwargs)
            return data

    def filter_bookings_with_http_info(self, **kwargs):
        """
        Get all bookings matching a filter
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.filter_bookings_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reference: 
        :param date date: 
        :param str lastname: 
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference', 'date', 'lastname']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_bookings" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/filter'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'reference' in params:
            query_params['reference'] = params['reference']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lastname' in params:
            query_params['lastname'] = params['lastname']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20013',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_bookings(self, **kwargs):
        """
        Retrieve all bookings
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_bookings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Booking]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_bookings_with_http_info(**kwargs)
        else:
            (data) = self.get_all_bookings_with_http_info(**kwargs)
            return data

    def get_all_bookings_with_http_info(self, **kwargs):
        """
        Retrieve all bookings
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_bookings_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Booking]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_bookings" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/all'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Booking]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_with_trashed_bookings(self, **kwargs):
        """
        Retrieve all bookings including any deleted models
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_with_trashed_bookings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Booking]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_with_trashed_bookings_with_http_info(**kwargs)
        else:
            (data) = self.get_all_with_trashed_bookings_with_http_info(**kwargs)
            return data

    def get_all_with_trashed_bookings_with_http_info(self, **kwargs):
        """
        Retrieve all bookings including any deleted models
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_with_trashed_bookings_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Booking]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_with_trashed_bookings" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/all-with-trashed'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Booking]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_booking(self, id, **kwargs):
        """
        Retrieve a booking by ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_booking(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_booking_with_http_info(id, **kwargs)
        else:
            (data) = self.get_booking_with_http_info(id, **kwargs)
            return data

    def get_booking_with_http_info(self, id, **kwargs):
        """
        Retrieve a booking by ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_booking_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_booking`")

        resource_path = '/booking'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2007',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_customer_bookings(self, customer_id, **kwargs):
        """
        Get all bookings for a customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_customer_bookings(customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int customer_id:  (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_customer_bookings_with_http_info(customer_id, **kwargs)
        else:
            (data) = self.get_customer_bookings_with_http_info(customer_id, **kwargs)
            return data

    def get_customer_bookings_with_http_info(self, customer_id, **kwargs):
        """
        Get all bookings for a customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_customer_bookings_with_http_info(customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int customer_id:  (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_bookings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_customer_bookings`")

        resource_path = '/booking/customer'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'customer_id' in params:
            query_params['customer_id'] = params['customer_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20013',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payments(self, **kwargs):
        """
        Retrieve all payments made for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payments(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id: 
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payments_with_http_info(**kwargs)
        else:
            (data) = self.get_payments_with_http_info(**kwargs)
            return data

    def get_payments_with_http_info(self, **kwargs):
        """
        Retrieve all payments made for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payments_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id: 
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/payments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20015',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_refunds(self, **kwargs):
        """
        Retrieve all refunds for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refunds(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id: 
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_refunds_with_http_info(**kwargs)
        else:
            (data) = self.get_refunds_with_http_info(**kwargs)
            return data

    def get_refunds_with_http_info(self, **kwargs):
        """
        Retrieve all refunds for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refunds_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id: 
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refunds" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/refunds'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20016',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_todays_bookings(self, **kwargs):
        """
        Get all bookings made today
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_todays_bookings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_todays_bookings_with_http_info(**kwargs)
        else:
            (data) = self.get_todays_bookings_with_http_info(**kwargs)
            return data

    def get_todays_bookings_with_http_info(self, **kwargs):
        """
        Get all bookings made today
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_todays_bookings_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_todays_bookings" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/today'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20013',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_tommorows_bookings(self, **kwargs):
        """
        Get all bookings made today
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tommorows_bookings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tommorows_bookings_with_http_info(**kwargs)
        else:
            (data) = self.get_tommorows_bookings_with_http_info(**kwargs)
            return data

    def get_tommorows_bookings_with_http_info(self, **kwargs):
        """
        Get all bookings made today
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tommorows_bookings_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tommorows_bookings" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/booking/tommorow'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20013',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def init_booking(self, source, **kwargs):
        """
        Create a new empty booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.init_booking(source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source:  (required)
        :param int agent_id: 
        :param str agent_reference: 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.init_booking_with_http_info(source, **kwargs)
        else:
            (data) = self.init_booking_with_http_info(source, **kwargs)
            return data

    def init_booking_with_http_info(self, source, **kwargs):
        """
        Create a new empty booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.init_booking_with_http_info(source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source:  (required)
        :param int agent_id: 
        :param str agent_reference: 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'agent_id', 'agent_reference']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method init_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params) or (params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `init_booking`")

        resource_path = '/booking/init'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'source' in params:
            query_params['source'] = params['source']
        if 'agent_id' in params:
            query_params['agent_id'] = params['agent_id']
        if 'agent_reference' in params:
            query_params['agent_reference'] = params['agent_reference']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse201',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_booking_detail(self, booking_id, bookingdetail_id, **kwargs):
        """
        Remove a detail from a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_booking_detail(booking_id, bookingdetail_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int bookingdetail_id:  (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_booking_detail_with_http_info(booking_id, bookingdetail_id, **kwargs)
        else:
            (data) = self.remove_booking_detail_with_http_info(booking_id, bookingdetail_id, **kwargs)
            return data

    def remove_booking_detail_with_http_info(self, booking_id, bookingdetail_id, **kwargs):
        """
        Remove a detail from a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_booking_detail_with_http_info(booking_id, bookingdetail_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int bookingdetail_id:  (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'bookingdetail_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_booking_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `remove_booking_detail`")
        # verify the required parameter 'bookingdetail_id' is set
        if ('bookingdetail_id' not in params) or (params['bookingdetail_id'] is None):
            raise ValueError("Missing the required parameter `bookingdetail_id` when calling `remove_booking_detail`")

        resource_path = '/booking/remove-detail'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'bookingdetail_id' in params:
            query_params['bookingdetail_id'] = params['bookingdetail_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20017',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def resend_confirmation(self, booking_id, **kwargs):
        """
        Resend the confirmation email to the lead customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.resend_confirmation(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.resend_confirmation_with_http_info(booking_id, **kwargs)
        else:
            (data) = self.resend_confirmation_with_http_info(booking_id, **kwargs)
            return data

    def resend_confirmation_with_http_info(self, booking_id, **kwargs):
        """
        Resend the confirmation email to the lead customer
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.resend_confirmation_with_http_info(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `resend_confirmation`")

        resource_path = '/booking/resend-confirmation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def reserve_booking(self, booking_id, **kwargs):
        """
        Reserve a booking and its sessions capcity until a set date
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reserve_booking(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param date reserved_until: 
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reserve_booking_with_http_info(booking_id, **kwargs)
        else:
            (data) = self.reserve_booking_with_http_info(booking_id, **kwargs)
            return data

    def reserve_booking_with_http_info(self, booking_id, **kwargs):
        """
        Reserve a booking and its sessions capcity until a set date
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reserve_booking_with_http_info(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param date reserved_until: 
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'reserved_until']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reserve_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `reserve_booking`")

        resource_path = '/booking/reserve'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'reserved_until' in params:
            query_params['reserved_until'] = params['reserved_until']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20018',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def save_booking(self, booking_id, **kwargs):
        """
        Save a booking as a quote and release all capacity of sessions
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_booking(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_booking_with_http_info(booking_id, **kwargs)
        else:
            (data) = self.save_booking_with_http_info(booking_id, **kwargs)
            return data

    def save_booking_with_http_info(self, booking_id, **kwargs):
        """
        Save a booking as a quote and release all capacity of sessions
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_booking_with_http_info(booking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `save_booking`")

        resource_path = '/booking/save'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def set_lead_customer(self, booking_id, customer_id, **kwargs):
        """
        Set the lead customer for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_lead_customer(booking_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int customer_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_lead_customer_with_http_info(booking_id, customer_id, **kwargs)
        else:
            (data) = self.set_lead_customer_with_http_info(booking_id, customer_id, **kwargs)
            return data

    def set_lead_customer_with_http_info(self, booking_id, customer_id, **kwargs):
        """
        Set the lead customer for a booking
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_lead_customer_with_http_info(booking_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int booking_id:  (required)
        :param int customer_id:  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'customer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_lead_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params) or (params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `set_lead_customer`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `set_lead_customer`")

        resource_path = '/booking/set-lead'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'booking_id' in params:
            query_params['booking_id'] = params['booking_id']
        if 'customer_id' in params:
            query_params['customer_id'] = params['customer_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
