# coding: utf-8

"""
    Scubawhere API Documentation

    This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

    OpenAPI spec version: 1.0.0
    Contact: bryan@scubawhere.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AccommodationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_accommodation(self, name, capacity, base_prices, **kwargs):
        """
        
        Create an accommodation

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_accommodation(name, capacity, base_prices, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name of the type of accommodation (required)
        :param int capacity: Number of beds in the accommodation (required)
        :param int base_prices: Price of the accommodation and the dates of when the price is applicable (required)
        :param str description: Description of the accommodation
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_accommodation_with_http_info(name, capacity, base_prices, **kwargs)
        else:
            (data) = self.add_accommodation_with_http_info(name, capacity, base_prices, **kwargs)
            return data

    def add_accommodation_with_http_info(self, name, capacity, base_prices, **kwargs):
        """
        
        Create an accommodation

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_accommodation_with_http_info(name, capacity, base_prices, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name of the type of accommodation (required)
        :param int capacity: Number of beds in the accommodation (required)
        :param int base_prices: Price of the accommodation and the dates of when the price is applicable (required)
        :param str description: Description of the accommodation
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'capacity', 'base_prices', 'description']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_accommodation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `add_accommodation`")
        # verify the required parameter 'capacity' is set
        if ('capacity' not in params) or (params['capacity'] is None):
            raise ValueError("Missing the required parameter `capacity` when calling `add_accommodation`")
        # verify the required parameter 'base_prices' is set
        if ('base_prices' not in params) or (params['base_prices'] is None):
            raise ValueError("Missing the required parameter `base_prices` when calling `add_accommodation`")

        resource_path = '/accommodation/add'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'name' in params:
            query_params['name'] = params['name']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'capacity' in params:
            query_params['capacity'] = params['capacity']
        if 'base_prices' in params:
            query_params['base_prices'] = params['base_prices']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_accommodation(self, body, **kwargs):
        """
        Delete an accommodation by ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_accommodation(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: ID of the accommodation (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_accommodation_with_http_info(body, **kwargs)
        else:
            (data) = self.delete_accommodation_with_http_info(body, **kwargs)
            return data

    def delete_accommodation_with_http_info(self, body, **kwargs):
        """
        Delete an accommodation by ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_accommodation_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: ID of the accommodation (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_accommodation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_accommodation`")

        resource_path = '/accommodation/delete'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'body' in params:
            query_params['body'] = params['body']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def edit_agent(self, id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, **kwargs):
        """
        Create a new agent
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_agent(id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :param int name:  (required)
        :param str branch_name:  (required)
        :param str branch_address:  (required)
        :param str branch_phone:  (required)
        :param str branch_email:  (required)
        :param float commission:  (required)
        :param str terms:  (required)
        :param str website: 
        :param str billing_address: 
        :param str billing_phone: 
        :param str billing_email: 
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_agent_with_http_info(id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, **kwargs)
        else:
            (data) = self.edit_agent_with_http_info(id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, **kwargs)
            return data

    def edit_agent_with_http_info(self, id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, **kwargs):
        """
        Create a new agent
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_agent_with_http_info(id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id:  (required)
        :param int name:  (required)
        :param str branch_name:  (required)
        :param str branch_address:  (required)
        :param str branch_phone:  (required)
        :param str branch_email:  (required)
        :param float commission:  (required)
        :param str terms:  (required)
        :param str website: 
        :param str billing_address: 
        :param str billing_phone: 
        :param str billing_email: 
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'branch_name', 'branch_address', 'branch_phone', 'branch_email', 'commission', 'terms', 'website', 'billing_address', 'billing_phone', 'billing_email']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `edit_agent`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `edit_agent`")
        # verify the required parameter 'branch_name' is set
        if ('branch_name' not in params) or (params['branch_name'] is None):
            raise ValueError("Missing the required parameter `branch_name` when calling `edit_agent`")
        # verify the required parameter 'branch_address' is set
        if ('branch_address' not in params) or (params['branch_address'] is None):
            raise ValueError("Missing the required parameter `branch_address` when calling `edit_agent`")
        # verify the required parameter 'branch_phone' is set
        if ('branch_phone' not in params) or (params['branch_phone'] is None):
            raise ValueError("Missing the required parameter `branch_phone` when calling `edit_agent`")
        # verify the required parameter 'branch_email' is set
        if ('branch_email' not in params) or (params['branch_email'] is None):
            raise ValueError("Missing the required parameter `branch_email` when calling `edit_agent`")
        # verify the required parameter 'commission' is set
        if ('commission' not in params) or (params['commission'] is None):
            raise ValueError("Missing the required parameter `commission` when calling `edit_agent`")
        # verify the required parameter 'terms' is set
        if ('terms' not in params) or (params['terms'] is None):
            raise ValueError("Missing the required parameter `terms` when calling `edit_agent`")

        resource_path = '/agent/edit'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'website' in params:
            query_params['website'] = params['website']
        if 'branch_name' in params:
            query_params['branch_name'] = params['branch_name']
        if 'branch_address' in params:
            query_params['branch_address'] = params['branch_address']
        if 'branch_phone' in params:
            query_params['branch_phone'] = params['branch_phone']
        if 'branch_email' in params:
            query_params['branch_email'] = params['branch_email']
        if 'billing_address' in params:
            query_params['billing_address'] = params['billing_address']
        if 'billing_phone' in params:
            query_params['billing_phone'] = params['billing_phone']
        if 'billing_email' in params:
            query_params['billing_email'] = params['billing_email']
        if 'commission' in params:
            query_params['commission'] = params['commission']
        if 'terms' in params:
            query_params['terms'] = params['terms']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2004',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def filter_accommodation(self, **kwargs):
        """
        Get all the accommodations matching a filter
        Get all the accommodations and their bookings between certain dates and / or an accommodation id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.filter_accommodation(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param date before: The date for the upper boundary of the dates
        :param date after: The date for the lower boundary of the dates
        :param int accommodation_id: ID Accommodation to filter by
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.filter_accommodation_with_http_info(**kwargs)
        else:
            (data) = self.filter_accommodation_with_http_info(**kwargs)
            return data

    def filter_accommodation_with_http_info(self, **kwargs):
        """
        Get all the accommodations matching a filter
        Get all the accommodations and their bookings between certain dates and / or an accommodation id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.filter_accommodation_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param date before: The date for the upper boundary of the dates
        :param date after: The date for the lower boundary of the dates
        :param int accommodation_id: ID Accommodation to filter by
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['before', 'after', 'accommodation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_accommodation" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accommodation/filter'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'before' in params:
            query_params['before'] = params['before']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'accommodation_id' in params:
            query_params['accommodation_id'] = params['accommodation_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_accommodation(self, id, **kwargs):
        """
        
        Retrieve an accommodation by ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_accommodation(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] id: ID of the accommodation to be retrieved (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_accommodation_with_http_info(id, **kwargs)
        else:
            (data) = self.find_accommodation_with_http_info(id, **kwargs)
            return data

    def find_accommodation_with_http_info(self, id, **kwargs):
        """
        
        Retrieve an accommodation by ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_accommodation_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] id: ID of the accommodation to be retrieved (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_accommodation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `find_accommodation`")

        resource_path = '/accommodation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_accommodations(self, **kwargs):
        """
        
        Retrieve all accommodation

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accommodations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Accommodation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_accommodations_with_http_info(**kwargs)
        else:
            (data) = self.get_all_accommodations_with_http_info(**kwargs)
            return data

    def get_all_accommodations_with_http_info(self, **kwargs):
        """
        
        Retrieve all accommodation

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accommodations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Accommodation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_accommodations" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accommodations/all'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Accommodation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_with_trashed_accommodations(self, **kwargs):
        """
        Retrieve all accommodation including any deleted models
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_with_trashed_accommodations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Accommodation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_with_trashed_accommodations_with_http_info(**kwargs)
        else:
            (data) = self.get_all_with_trashed_accommodations_with_http_info(**kwargs)
            return data

    def get_all_with_trashed_accommodations_with_http_info(self, **kwargs):
        """
        Retrieve all accommodation including any deleted models
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_with_trashed_accommodations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Accommodation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_with_trashed_accommodations" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accommodations/all-with-trashed'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Accommodation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_accommodation(self, id, **kwargs):
        """
        Update an Accommodation
        Updates the accommodation by id using the specified fields

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_accommodation(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the Accommodation to be updated (required)
        :param str name: Name of the Accommodation
        :param int capacity: Number of rooms the accommodation holds
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_accommodation_with_http_info(id, **kwargs)
        else:
            (data) = self.update_accommodation_with_http_info(id, **kwargs)
            return data

    def update_accommodation_with_http_info(self, id, **kwargs):
        """
        Update an Accommodation
        Updates the accommodation by id using the specified fields

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_accommodation_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the Accommodation to be updated (required)
        :param str name: Name of the Accommodation
        :param int capacity: Number of rooms the accommodation holds
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'capacity']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_accommodation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_accommodation`")

        resource_path = '/accommodation/edit'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'capacity' in params:
            query_params['capacity'] = params['capacity']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
